/*
buildscript {
	ext {
		springBootVersion = '2.4.3.RELEASE'
		PACKAGECLOUD_REPOS_TOKEN = project.hasProperty('PACKAGECLOUD_REPOS_TOKEN') ? PACKAGECLOUD_REPOS_TOKEN : System.getenv('PACKAGECLOUD_REPOS_TOKEN')
	}
	repositories {	
		maven {
	       url "https://plugins.gradle.org/m2/"
	    }
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:2.4.3.RELEASE")
		classpath('gradle.plugin.com.palantir.gradle.docker:gradle-docker:0.22.0')
	}
}
*/
plugins {
	id 'org.springframework.boot' version '2.4.3'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	// id 'com.palantir.docker' version '0.22.1'
	id 'com.google.cloud.tools.jib' version '2.8.0'

}


group = 'com.springBoot.sample'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'mysql:mysql-connector-java'
	implementation 'io.springfox:springfox-boot-starter:3.0.0'
	implementation 'com.amazonaws:aws-java-sdk-ssm:1.11.962'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testAnnotationProcessor 'org.projectlombok:lombok'
}

test {
	useJUnitPlatform()
}


ext {
	SERVICE_NAME = System.getenv('serviceName')!=null?System.getenv('serviceName'):'springsampleproject';
	ENV_TYPE = System.getenv('envType')!=null?System.getenv('envType'):'dev';
}

bootJar {
    baseName = SERVICE_NAME
    version =  '0.0.1'
}
/*
docker {
    dependsOn build
    name "${bootJar.baseName}"
    tags 'latest'
    files bootJar.archivePath
    buildArgs(["JAR_FILE": "${bootJar.archiveName}", "BUILD_STAGE":ENV_TYPE])
}

compileJava.dependsOn(clean)
*/
jib {
    from {
        image = 'openjdk:11-jdk-slim'
    }

    to {
        image = "${bootJar.baseName}:${bootJar.version}"
    }
}
